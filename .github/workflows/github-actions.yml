name: Test And ECS deploy
on:
  push:
    branches: [main]
  pull_request:
    types:
      - opened
      - synchronize
jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      #checkout submoduleも
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      #submodule update
      - name: update submodule
        run: git submodule update --remote --recursive
      #javaセットアップ
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"
          cache: "gradle"
      #gradle実行権限
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      #protoファイルビルド
      - name: generateProto
        run: ./gradlew generateProto
      #ktlint
      - name: ktlint check
        run: ./gradlew ktlintCheck
      #テスト用にdocker起動
      - name: start docker
        run: docker-compose up -d
      #テスト
      - name: Test with Gradle
        run: ./gradlew test
      #ビルド
      - name: build with Gradle
        run: ./gradlew build -x test
      #jarをコピー
      - name: copy jar
        run: cp ./build/libs/grpc-spring-app-0.0.1-SNAPSHOT.jar ops/app/app.jar
      #作成したjarを別のjobで使う
      - uses: actions/upload-artifact@v1
        with:
          name: appjar
          path: ops/app/app.jar
  docker_build_and_deploy:
    #テストとビルドのjobを待つ
    needs: test_and_build
    #デプロイはmainブランチのみ
    if: contains(github.ref, '/heads/main')
    runs-on: ubuntu-latest
    env:
      ECR_REPOSITORY: spring-grpc-app-ecr-repository
      CLUSTER_NAME: spring-grpc-app-ecs-cluster
      SERVICE_NAME: spring-grpc-app-ecs-service
      TASK_DEFINITION: ./ops/ECS/container_definitions.json
      ECS_CONTAINER_NAME: spring-grpc-app
    steps:
      - uses: actions/checkout@v2
      # 別jobで作ったファイルをダウンロードする
      - uses: actions/download-artifact@v1
        with:
          name: appjar
          path: ops/app
      # awsの認証をする
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      # ECRログイン
      - uses: aws-actions/amazon-ecr-login@v1
        # あとで結果を参照するのでidをつけておく
        id: login-ecr
      # dockerビルドとECRpush
      - name: docker build, ECR push
        # このstepだけで使える環境変数
        env:
          # ECRログインstepの結果を使う
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # GITHUB_SHAなど、最初から使える環境変数もある
          # docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA} ./ops/app/
          ./gradlew bootBuildImage --imageName $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA}
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${GITHUB_SHA}
      # TaskDefinitionのimageとtagを差し替えした、新しいTaskDefinitionを作る
      - uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # 元になるTaskDefinitionファイルのパス
          task-definition: ${TASK_DEFINITION}
          # コンテナ名
          container-name: ${ECS_CONTAINER_NAME}
          # 新しいイメージ名とタグ
          image: ${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${{ github.sha }}
        # あとで参照するのでid
        id: render-web-container
      # ECSサービスの更新とデプロイ
      - uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # 新しく作ったTaskDefinitionファイルのパスを指定
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          # ECSサービス名
          service: ${SERVICE_NAME}
          # ECSクラスタ名
          cluster: ${CLUSTER_NAME}
